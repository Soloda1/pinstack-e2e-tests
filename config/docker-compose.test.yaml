services:
  ######################
  # Postgres (user-service)
  ######################
  user-db:
    image: postgres:16-alpine
    container_name: pinstack-user-db-test
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: userservice_test
      POSTGRES_PORT: 5432
    command: postgres -p 5432
    volumes:
      - user_postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - pinstack_test
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -p 5432"]
      interval: 5s
      timeout: 5s
      retries: 5

  ######################
  # Postgres (auth-service)
  ######################
  auth-db:
    image: postgres:16-alpine
    container_name: pinstack-auth-db-test
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: authservice_test
      POSTGRES_PORT: 5433
    command: postgres -p 5433
    volumes:
      - auth_postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5433"
    networks:
      - pinstack_test
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -p 5433"]
      interval: 5s
      timeout: 5s
      retries: 5

  ######################
  # Postgres (post-service)
  ######################
  post-db:
    image: postgres:16-alpine
    container_name: pinstack-post-db-test
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postservice_test
      POSTGRES_PORT: 5434
    command: postgres -p 5434
    volumes:
      - post_postgres_data:/var/lib/postgresql/data
    ports:
      - "5434:5434"
    networks:
      - pinstack_test
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -p 5434"]
      interval: 5s
      timeout: 5s
      retries: 5

  ######################
  # Postgres (relation-service)
  ######################
  relation-db:
    image: postgres:16-alpine
    container_name: pinstack-relation-db-test
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: relationservice_test
      POSTGRES_PORT: 5435
    command: postgres -p 5435
    volumes:
      - relation_postgres_data:/var/lib/postgresql/data
    ports:
      - "5435:5435"
    networks:
      - pinstack_test
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -p 5435"]
      interval: 5s
      timeout: 5s
      retries: 5

  ######################
  # Postgres (notification-service)
  ######################
  notification-db:
    image: postgres:16-alpine
    container_name: pinstack-notification-db-test
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: notificationservice_test
      POSTGRES_PORT: 5436
    command: postgres -p 5436
    volumes:
      - notification_postgres_data:/var/lib/postgresql/data
    ports:
      - "5436:5436"
    networks:
      - pinstack_test
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -p 5436"]
      interval: 5s
      timeout: 5s
      retries: 5

  ##################
  # Kafka (KRaft mode)
  ##################
  kafka1:
    image: confluentinc/cp-kafka:latest
    container_name: pinstack-kafka1-test
    hostname: kafka1
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093,2@kafka2:9093,3@kafka3:9093'
      KAFKA_LISTENERS: 'PLAINTEXT://:9092,CONTROLLER://:9093'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka1:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka1_data:/var/lib/kafka/data
    networks:
      - pinstack_test
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka1:9092 --list > /dev/null 2>&1 || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 10

  kafka2:
    image: confluentinc/cp-kafka:latest
    container_name: pinstack-kafka2-test
    hostname: kafka2
    ports:
      - "9093:9092"
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093,2@kafka2:9093,3@kafka3:9093'
      KAFKA_LISTENERS: 'PLAINTEXT://:9092,CONTROLLER://:9093'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka2:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka2_data:/var/lib/kafka/data
    networks:
      - pinstack_test
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka2:9092 --list > /dev/null 2>&1 || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 10

  kafka3:
    image: confluentinc/cp-kafka:latest
    container_name: pinstack-kafka3-test
    hostname: kafka3
    ports:
      - "9094:9092"
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093,2@kafka2:9093,3@kafka3:9093'
      KAFKA_LISTENERS: 'PLAINTEXT://:9092,CONTROLLER://:9093'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka3:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka3_data:/var/lib/kafka/data
    networks:
      - pinstack_test
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka3:9092 --list > /dev/null 2>&1 || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 10

  # Инициализация топиков Kafka
  kafka-setup:
    image: confluentinc/cp-kafka:latest
    container_name: pinstack-kafka-setup-test
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "
      # Ожидание доступности Kafka
      echo 'Ожидание доступности Kafka...'
      kafka-topics --bootstrap-server kafka1:9092 --list

      echo 'Создание топиков Kafka...'
      kafka-topics --bootstrap-server kafka1:9092 --create --if-not-exists --topic user-events --partitions 3 --replication-factor 3
      kafka-topics --bootstrap-server kafka1:9092 --create --if-not-exists --topic post-events --partitions 3 --replication-factor 3
      kafka-topics --bootstrap-server kafka1:9092 --create --if-not-exists --topic error-events --partitions 3 --replication-factor 3

      echo 'Топики Kafka созданы'
      "
    networks:
      - pinstack_test

  # Микросервисы
  user-service:
    image: pinstack/user-service:test
    container_name: pinstack-user-service-test
    depends_on:
      user-db:
        condition: service_healthy
      kafka1:
        condition: service_healthy
    ports:
      - "50051:50051"
    environment:
      DB_HOST: user-db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: userservice_test
      KAFKA_BROKERS: kafka1:9092,kafka2:9092,kafka3:9092
      APP_ENV: test
    networks:
      - pinstack_test

  auth-service:
    image: pinstack/auth-service:test
    container_name: pinstack-auth-service-test
    depends_on:
      auth-db:
        condition: service_healthy
      user-service:
        condition: service_started
      kafka1:
        condition: service_healthy
    ports:
      - "50052:50052"
    environment:
      DB_HOST: auth-db
      DB_PORT: 5433
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: authservice_test
      KAFKA_BROKERS: kafka1:9092,kafka2:9092,kafka3:9092
      APP_ENV: test
      JWT_SECRET: "my-secret"
      JWT_ACCESS_EXPIRES_AT: "1m"
      JWT_REFRESH_EXPIRES_AT: "5m"
    networks:
      - pinstack_test

  post-service:
    image: pinstack/post-service:test
    container_name: pinstack-post-service-test
    depends_on:
      post-db:
        condition: service_healthy
      user-service:
        condition: service_started
      kafka1:
        condition: service_healthy
    ports:
      - "50053:50053"
    environment:
      DB_HOST: post-db
      DB_PORT: 5434
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: postservice_test
      KAFKA_BROKERS: kafka1:9092,kafka2:9092,kafka3:9092
      APP_ENV: test
    networks:
      - pinstack_test

  relation-service:
    image: pinstack/relation-service:test
    container_name: pinstack-relation-service-test
    depends_on:
      relation-db:
        condition: service_healthy
      user-service:
        condition: service_started
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    ports:
      - "50054:50054"
    environment:
      DB_HOST: relation-db
      DB_PORT: 5435
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: relationservice_test
      KAFKA_BROKERS: kafka1:9092,kafka2:9092,kafka3:9092
      APP_ENV: test
    networks:
      - pinstack_test

  notification-service:
    image: pinstack/notification-service:test
    container_name: pinstack-notification-service-test
    depends_on:
      notification-db:
        condition: service_healthy
      user-service:
        condition: service_started
      relation-service:
        condition: service_started
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    ports:
      - "50055:50055"
    environment:
      DB_HOST: notification-db
      DB_PORT: 5436
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: notificationservice_test
      KAFKA_BROKERS: kafka1:9092,kafka2:9092,kafka3:9092
      APP_ENV: test
    networks:
      - pinstack_test

  # API Gateway
  api-gateway:
    image: pinstack/api-gateway:test
    container_name: pinstack-api-gateway-test
    depends_on:
      - user-service
      - auth-service
      - post-service
      - relation-service
      - notification-service
    ports:
      - "8080:8080"
    environment:
      ENV: test
      HTTP_SERVER_ADDRESS: "0.0.0.0"
      HTTP_SERVER_PORT: 8080
      HTTP_SERVER_TIMEOUT: 60
      HTTP_SERVER_IDLE_TIMEOUT: 120
      USER_SERVICE_ADDRESS: user-service
      USER_SERVICE_PORT: 50051
      AUTH_SERVICE_ADDRESS: auth-service
      AUTH_SERVICE_PORT: 50052
      POST_SERVICE_ADDRESS: post-service
      POST_SERVICE_PORT: 50053
      RELATION_SERVICE_ADDRESS: relation-service
      RELATION_SERVICE_PORT: 50054
      NOTIFICATION_SERVICE_ADDRESS: notification-service
      NOTIFICATION_SERVICE_PORT: 50055
      JWT_SECRET: "my-secret"
      JWT_ACCESS_EXPIRES_AT: "1m"
      JWT_REFRESH_EXPIRES_AT: "5m"
      PROMETHEUS_ADDRESS: "0.0.0.0"
      PROMETHEUS_PORT: 9106
    networks:
      - pinstack_test


volumes:
  user_postgres_data:
  auth_postgres_data:
  post_postgres_data:
  relation_postgres_data:
  notification_postgres_data:
  kafka1_data:
  kafka2_data:
  kafka3_data:

networks:
  pinstack_test:
    name: pinstack_test
